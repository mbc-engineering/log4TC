<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="PRG_Licencse" Id="{dc1c9e92-62d3-4cd4-a069-dd10fb447870}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'conditionalshow'}
PROGRAM INTERNAL PRG_Licencse
{library private}
VAR
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bExpired 		: BOOL;
	
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bValidLicense	: BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="_CheckExpiration" Id="{09e7d4f0-a008-443d-841e-a2496614e481}">
      <Declaration><![CDATA[METHOD PRIVATE _CheckExpiration : BOOL
VAR
	nTaskIdx		: DINT;
	nCycleTime		: UDINT;
	nCycleCount		: UDINT;
END_VAR
VAR_STAT
	bCheckRunning	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bExpired THEN
	RETURN;
END_IF

IF Tc2_Utilities.TestAndSet(bCheckRunning) THEN
	nTaskIdx := Tc2_Utilities.GETCURTASKINDEXEX();
	nCycleCount := TwinCAT_SystemInfoVarList._TaskInfo[nTaskIdx].CycleCount;
	nCycleTime := TwinCAT_SystemInfoVarList._TaskInfo[nTaskIdx].CycleTime;
	
	// nCycletime 100ns
	bExpired S= (ULINT#24 * 3600 * 1000 * 1000 * 10) < (UDINT_TO_ULINT(nCycleCount) * UDINT_TO_ULINT(nCycleTime));
	IF bExpired THEN
		F_InternalLog(
			E_LogLevel.eWarn,
			'Licensing',
			'Test license expired.',
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE
		);
	END_IF
	
	bCheckRunning := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_InitializeLicense" Id="{a2ff8a41-c2b2-498c-9027-7110f9f8699a}">
      <Declaration><![CDATA[METHOD PRIVATE _InitializeLicense
VAR_STAT
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bInit			: BOOL;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	fbLicense		: Tc2_Utilities.FB_GetLicensesEx;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInit THEN
	RETURN;
END_IF

fbLicense(
	bExecute := TRUE,
);

IF NOT fbLicense.bBusy THEN
	bInit := TRUE;
	IF NOT fbLicense.bError THEN
		F_InternalLog(
			E_LogLevel.eInfo,
			'Licensing',
			'Licenses successfully read. Got %d OEM licenses.',
			Tc2_Utilities.F_UDINT(fbLicense.nOemLicenses),
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE
		);		
		// fbLicense.aOemLicenses[1].
		// TODO read OEM Lizenz
		// bValidLicense := TRUE or FALSE;
	ELSE
		F_InternalLog(
			E_LogLevel.eWarn,
			'Licensing',
			'Error reading licensing information. %x',
			Tc2_Utilities.F_UDINT(fbLicense.nErrorId),
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE
		);				
	END_IF
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitializeLicenseFromAnyTask" Id="{d1fb34e7-78c2-4c26-b963-b23a16318f5e}">
      <Declaration><![CDATA[METHOD INTERNAL InitializeLicenseFromAnyTask
VAR_STAT
	bFirstTask		: BOOL;
	nActualTask		: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Tc2_Utilities.TestAndSet(bFirstTask) THEN
	nActualTask := Tc2_Utilities.GETCURTASKINDEXEX();
END_IF

IF Tc2_Utilities.GETCURTASKINDEXEX() = nActualTask THEN
	_InitializeLicense();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsLicensed" Id="{33116d77-b962-4ef9-9f70-0ec9b8f94385}">
      <Declaration><![CDATA[PROPERTY INTERNAL IsLicensed : BOOL]]></Declaration>
      <Get Name="Get" Id="{0432ddf5-61cf-4b2b-98c8-af755219dcf8}">
        <Declaration><![CDATA[
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF bValidLicense THEN
	IsLicensed := TRUE;
ELSE
	_CheckExpiration();
	IsLicensed := NOT bExpired;
END_IF

]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>