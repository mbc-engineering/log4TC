<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="PRG_Licencse" Id="{dc1c9e92-62d3-4cd4-a069-dd10fb447870}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'conditionalshow'}
PROGRAM INTERNAL PRG_Licencse
{library private}
VAR
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bExpired 		: BOOL;
	
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bValidLicense	: BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="_CheckExpiration" Id="{09e7d4f0-a008-443d-841e-a2496614e481}">
      <Declaration><![CDATA[METHOD PRIVATE _CheckExpiration : BOOL
VAR
	nTaskIdx		: DINT;
	nCycleTime		: UDINT;
	nCycleCount		: UDINT;
END_VAR
VAR_STAT
	bCheckRunning	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bExpired THEN
	RETURN;
END_IF

IF Tc2_Utilities.TestAndSet(bCheckRunning) THEN
	nTaskIdx := Tc2_Utilities.GETCURTASKINDEXEX();
	nCycleCount := TwinCAT_SystemInfoVarList._TaskInfo[nTaskIdx].CycleCount;
	nCycleTime := TwinCAT_SystemInfoVarList._TaskInfo[nTaskIdx].CycleTime;
	
	// nCycletime 100ns
	bExpired S= (ULINT#24 * 3600 * 1000 * 1000 * 10) < (UDINT_TO_ULINT(nCycleCount) * UDINT_TO_ULINT(nCycleTime));
	IF bExpired THEN
		F_InternalLog(
			E_LogLevel.eWarn,
			'Licensing',
			'Test license expired.',
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE,
			Tc2_Utilities.EMPTY_ARG_VALUE
		);
	END_IF
	
	bCheckRunning := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_CheckLicenseActivation" Id="{932e2d5c-95fb-44c7-af62-0b271736816e}">
      <Declaration><![CDATA[METHOD PRIVATE _CheckLicenseActivation : BOOL
VAR_INPUT
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	stSystemUid 	: GUID;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	stLicenseId		: GUID;
END_VAR
VAR CONSTANT
	sAlphabet		: STRING := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
END_VAR
VAR
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	fbSha256		: FB_SHA256;	
	
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	aInput			: ARRAY[0..31] OF BYTE;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	aHash			: ARRAY[0..31] OF BYTE;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	nSrc			: UINT;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	sId				: STRING;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bByte			: BYTE;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMCPY(ADR(aInput), ADR(stSystemUid), 16);
MEMCPY(ADR(aInput) + 16, ADR(stLicenseId), 16);
aHash := fbSha256.Hash(ADR(aInput), 32);

// umwandeln auf String
FOR nSrc := 0 TO 29 BY 3 DO
	bByte := SHR(aHash[nSrc], 2);
	sId := CONCAT(sId, MID(sAlphabet, 1, bByte + 1));
	bByte := SHL(aHash[nSrc] AND 16#03, 4) OR SHR(aHash[nSrc + 1], 4);
	sId := CONCAT(sId, MID(sAlphabet, 1, bByte + 1)); 
	bByte := SHL(aHash[nSrc + 1] AND 16#0F, 2) OR SHR(aHash[nSrc + 2], 6);
	sId := CONCAT(sId, MID(sAlphabet, 1, bByte + 1)); 
	bByte := aHash[nSrc + 2] AND 16#3F;
	sId := CONCAT(sId, MID(sAlphabet, 1, bByte + 1)); 
END_FOR

_CheckLicenseActivation := Config.sLicenseActivation = sId;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_InitializeLicense" Id="{a2ff8a41-c2b2-498c-9027-7110f9f8699a}">
      <Declaration><![CDATA[METHOD PRIVATE _InitializeLicense
VAR_STAT
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	bInit			: BOOL;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	fbLicense		: Tc2_Utilities.FB_CheckLicense;

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}	
	stLog4TcGuid 	: GUID;	
	
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	nState			: UINT;			

	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	fbGetDeviceId	: Tc2_Utilities.FB_GetDeviceIdentificationEx;	
	
	{attribute 'TcNoSymbol'}
	{attribute 'hide'}
	fbGetSystemId	: Tc2_Utilities.FB_GetSystemId;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInit THEN
	RETURN;
END_IF

CASE nState OF
	0:
		stLog4TcGuid.Data1 := 16#4570069B XOR 16#DEADBEEF;
		stLog4TcGuid.Data2 := 16#5194 XOR 16#DEAD;
		stLog4TcGuid.Data3 := 16#F3C9 XOR 16#BEEF;
		stLog4TcGuid.Data4[0] := 16#D5 XOR 16#45;
		stLog4TcGuid.Data4[1] := 16#CB XOR 16#70;
		stLog4TcGuid.Data4[2] := 16#44 XOR 16#06;
		stLog4TcGuid.Data4[3] := 16#AC XOR 16#9B;
		stLog4TcGuid.Data4[4] := 16#BC XOR 16#51;
		stLog4TcGuid.Data4[5] := 16#92 XOR 16#94;
		stLog4TcGuid.Data4[6] := 16#6A XOR 16#2E;
		stLog4TcGuid.Data4[7] := 16#AF XOR 16#54;
	
		fbGetDeviceId(bExecute:=FALSE);
		nState := 10;
		
	10:
		fbGetDeviceId(bExecute:=TRUE);
		IF NOT fbGetDeviceId.bBusy THEN
			IF NOT fbGetDeviceId.bError THEN
				IF fbGetDeviceId.stDevIdent.strImageOsName = 'Windows CE' THEN
					nState := 40;
				ELSE
					nState := 20;
				END_IF
			ELSE
				F_InternalLog(
					E_LogLevel.eFatal,
					'Licensing',
					'Error reading device id. Result=%d',
					Tc2_Utilities.F_UDINT(fbGetDeviceId.nErrorID),
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE
				);
				nState := 100;
			END_IF
		END_IF
		
	20:
		// non Windows-CE
		fbLicense(
			bExecute := FALSE,
			stLicenseId := stLog4TcGuid,
		);		
		nState := 30;
		
	30:
		fbLicense(bExecute:=TRUE);
		IF NOT fbLicense.bBusy THEN
			IF NOT fbLicense.bError THEN
				F_InternalLog(
					E_LogLevel.eDebug,
					'Licensing',
					'Licenses successfully read. Result=%d Expiration=%s.',
					Tc2_Utilities.F_DINT(fbLicense.stCheckLicense.eResult),
					Tc2_Utilities.F_STRINGEx(fbLicense.stCheckLicense.sExpirationTime),
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE
				);
		
				CASE fbLicense.stCheckLicense.eResult OF
					Tc2_Utilities.E_LicenseHResult.E_LHR_LicenseOK,
					Tc2_Utilities.E_LicenseHResult.E_LHR_LicenseOK_OEM,
					Tc2_Utilities.E_LicenseHResult.E_LHR_LicenseOK_Pending:
						bValidLicense := TRUE;
						
					Tc2_Utilities.E_LicenseHResult.E_LHR_LicenseOK_Demo:
						bValidLicense := FALSE;					
					
					ELSE
						F_InternalLog(
							E_LogLevel.eWarn,
							'Licensing',
							'Error reading log4TC license. Result code: %d (E_LicenseHResult)',
							Tc2_Utilities.F_DINT(fbLicense.stCheckLicense.eResult),
							Tc2_Utilities.EMPTY_ARG_VALUE,
							Tc2_Utilities.EMPTY_ARG_VALUE,
							Tc2_Utilities.EMPTY_ARG_VALUE
						);
						bValidLicense := FALSE;					
				END_CASE
				
				// fbLicense.aOemLicenses[1].
				// TODO read OEM Lizenz
				// bValidLicense := TRUE or FALSE;
			ELSE
				F_InternalLog(
					E_LogLevel.eWarn,
					'Licensing',
					'Error reading licensing information. %x',
					Tc2_Utilities.F_UDINT(fbLicense.nErrorId),
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE
				);				
			END_IF
			nState := 100;
		END_IF
		
	40:
		// Windows-CE
		fbGetSystemId(bExecute:=FALSE);
		nState := 50;
		
	50:
		fbGetSystemId(bExecute:=TRUE);
		IF NOT fbGetSystemId.bBusy THEN
			IF NOT fbGetSystemId.bError THEN
				bValidLicense := _CheckLicenseActivation(
					fbGetSystemId.stSystemId, 
					stLog4TcGuid
				);
			ELSE
				F_InternalLog(
					E_LogLevel.eWarn,
					'Licensing',
					'Error reading system id. %x',
					Tc2_Utilities.F_UDINT(fbGetSystemId.nErrorId),
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE,
					Tc2_Utilities.EMPTY_ARG_VALUE
				);	
			END_IF
		
			nState := 100;
		END_IF
		
	100:
		IF NOT bValidLicense THEN
			F_InternalLog(
				E_LogLevel.eWarn,
				'Licensing',
				'Demo license active - log4TC stops working in 24h. Visit http://mbc.dev/log4tc to order a licencse.',
				Tc2_Utilities.EMPTY_ARG_VALUE,
				Tc2_Utilities.EMPTY_ARG_VALUE,
				Tc2_Utilities.EMPTY_ARG_VALUE,
				Tc2_Utilities.EMPTY_ARG_VALUE
			);			
		END_IF
		 
		bInit := TRUE;
		nState := 101;
		
	101:
		;
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitializeLicenseFromAnyTask" Id="{d1fb34e7-78c2-4c26-b963-b23a16318f5e}">
      <Declaration><![CDATA[METHOD INTERNAL InitializeLicenseFromAnyTask
VAR_STAT
	bFirstTask		: BOOL;
	nActualTask		: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Tc2_Utilities.TestAndSet(bFirstTask) THEN
	nActualTask := Tc2_Utilities.GETCURTASKINDEXEX();
END_IF

IF Tc2_Utilities.GETCURTASKINDEXEX() = nActualTask THEN
	_InitializeLicense();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsLicensed" Id="{33116d77-b962-4ef9-9f70-0ec9b8f94385}">
      <Declaration><![CDATA[PROPERTY INTERNAL IsLicensed : BOOL]]></Declaration>
      <Get Name="Get" Id="{0432ddf5-61cf-4b2b-98c8-af755219dcf8}">
        <Declaration><![CDATA[
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF bValidLicense THEN
	IsLicensed := TRUE;
ELSE
	_CheckExpiration();
	IsLicensed := NOT bExpired;
END_IF

]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>